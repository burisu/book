
desc "Generate view code for main views"
task :scaff => :environment do
  STDOUT.sync = true
  preamble = "Auto-generated by rake :scaff"
  meta_columns = ["id", "created_at", "updated_at", "creator_id", "updater_id", "lock_version"]
  models = []
  Dir.chdir(Rails.root.join("app", "models")) do
    models = Dir["*.rb"].collect{|f| f[0..-4]}
  end
  models = models.delete_if{|x| ["person"].include?(x)}.sort
  for model_name in models
    controller_name = model_name.pluralize
    model = model_name.classify.constantize
    
    attributes = model.columns
    form_attributes = {}
    form_attributes[:general] = attributes.select{|x| !meta_columns.include?(x.name)}

    show_attributes = {}
    show_attributes[:general] = attributes.select{|x| !meta_columns.include?(x.name)}
    show_attributes[:meta] = attributes.select{|x| meta_columns.include?(x.name)}

    # print "Generate views for #{controller_name}"
    print ":"
    views_dir = Rails.root.join("app", "views", controller_name)
    FileUtils.mkdir_p(views_dir)
    # Index
    File.open(views_dir.join("index.html.haml"), "wb:utf-8") do |f|
      f.write "-# #{preamble}\n"
      f.write "=toolbar do |t|\n"
      f.write "  -t.new\n"
      f.write "=list\n"
    end
    print "."
    # Show
    File.open(views_dir.join("show.html.haml"), "wb:utf-8") do |f|
      f.write "-# #{preamble}\n"
      for name, attrs in show_attributes
        f.write "=fieldset :#{name} do\n"
        f.write "  =attributes_list do |l|\n"
        for attribute in attrs
          f.write "    -l.attribute :#{attribute.name}\n"
        end
      end
    end
    print "."
    # Form
    File.open(views_dir.join("_form.html.haml"), "wb:utf-8") do |f|
      f.write "-# #{preamble}\n"
      f.write "=simple_fields_for @#{model_name} do |f|\n"
      for name, attrs in form_attributes
        f.write "  =fieldset :#{name} do\n"
        for attribute in attrs
          validators = model.validators_on(attribute.name)
          f.write "    =f."
          if attribute.name.match(/\_id$/)
            f.write "association :#{attribute.name[0..-4]}"
          else
            f.write "input :#{attribute.name}"
            if attribute.type == :boolean
              f.write ", :collection => [['Oui', 1], ['Non', 0]], :as => :radio"
            elsif attribute.name.match(/(^|\_)country$/)
              f.write ", :collection => countries, :as => :select"
            elsif attribute.name.match(/(^|\_)language$/)
              f.write ", :collection => countries, :as => :select"
            end
          end
          if !attribute.null or validators.detect{|v| v.is_a?(ActiveModel::Validations::PresenceValidator)}
            f.write ", :required => true"
          end
          f.write "\n"
        end
      end
    end
    print "."
    # Finished
  end
  puts ""
end
